from random import randint


def CTR(total_clicks: int, total_ad_impressions: int) -> bool:
    '''
    Click-Through Rate (CTR) method measures how successful an ad has been in capturing users' attention.

    :param total_clicks: int, the total amount of clicks on an ad
    :param total_ad_impressions: int, the number of times an ad was loaded on a page
    :return: bool, did the method work successfully or not
    '''
    try:
        total_clicks = int(total_clicks)
        if total_clicks < 0:
            raise ValueError
        total_ad_impressions = int(total_ad_impressions)
        if total_ad_impressions < 0:
            raise ValueError
    except ValueError:
        print('Please use a positive integer for both inputs.')
        return False

    if total_clicks > total_ad_impressions:
        print("Total Clicks can't be higher than Total Ad Impressions. Please use different inputs.")
        return False
    else:
        print('Click-Through Rate (CTR) is {}%'.format(round(total_clicks / total_ad_impressions * 100, 1)))

    return True


def ROI(amount_gained: float, amount_spent: float) -> bool:
    '''
    Return of Investment (ROI) method measures the amount of money you get back relative
    to the amount of money you put into something.

    :param amount_gained: float, the amount of income that has been generated by an investment
    :param amount_spent: float, the total amount spent on an investment
    :return: bool, did the method work successfully or not
    '''
    try:
        amount_gained = float(amount_gained)
    except ValueError:
        print('Please use a real number for the Amount Gained input.')
        return False
    try:
        amount_spent = float(amount_spent)
        if amount_spent < 0:
            raise ValueError
    except ValueError:
        print('Please use a positive real number for the Amount Spent input.')
        return False

    print('Return on Investment (ROI) is {}%'.format(round((amount_gained / amount_spent - 1) * 100, 1)))

    return True


def APT(n_users: int):
    '''
    Average Page Time (APT) method measures the average time spent by a user on a webpage.

    :param n_users: int, the number of users who visit a webpage
    :return: bool, did the method work successfully or not
    '''
    try:
        n_users = int(n_users)
        if n_users <= 0:
            raise ValueError
    except ValueError:
        print('Please use a positive integer for the Number of Users input.')
        return False

    # let's randomly generate the time spent on a page by a user
    # note that we have a lower bound that the time spent should be no less than 5 seconds
    # let's assume that the time spent has an upper bound as well, say 1 hour
    time_spent = []
    l_b = 5
    u_b = 60 ** 2  # 1 hour in seconds
    for i in range(n_users):
        time_spent.append(randint(l_b, u_b))

    print('Average Page Time is {} minutes.'.format(round(sum(time_spent) / n_users / 60, 1)))

    return True


def CLV(avg_purchase_value: float, avg_purchase_freq: float, avg_customer_lifespan: int) -> bool:
    '''
    Customer Lifetime Value method measures how much revenue a customer will drive over time.

    :param avg_purchase_value: float, average purchase value is a businessâ€™s total revenue during the time period
     divided by the number of purchases
    :param avg_purchase_freq: float, average purchase frequency is the total number of purchases in a period
    divided by the number of unique customers
    :param avg_customer_lifespan: int,
    :return: bool, did the method work successfully or not
    '''
    try:
        avg_purchase_value = float(avg_purchase_value)
        avg_purchase_freq = float(avg_purchase_freq)
        if avg_purchase_value < 0 or avg_purchase_freq < 0:
            raise ValueError
    except ValueError:
        print('Please use a positive real number for Average Purchase Value and Average Purchase Frequency inputs.')
        return False

    try:
        avg_customer_lifespan = int(avg_customer_lifespan)
        if avg_customer_lifespan < 0:
            raise ValueError
    except ValueError:
        print('Please use a positive integer for Average Customer Lifespan input.')
        return False

    print('Customer Lifetime Value is {}$.'.format(round((avg_purchase_value - avg_purchase_freq) *
                                                         avg_customer_lifespan, 1)))

    return True


def CR(total_conversion: int, total_clicks: int) -> bool:
    '''
    Conversion Rate (CR) method measures the percentage of a website visitors
    that completed a desired goal or "conversion".

    :param total_conversion: int, the total amount of conversion recorded which have been caused by clicks
    :param total_clicks: int, the number of times an ad was clicked on
    :return: bool, did the method work successfully or not
    '''
    try:
        total_clicks = int(total_clicks)
        if total_clicks < 0:
            raise ValueError
        total_conversion = int(total_conversion)
        if total_conversion < 0:
            raise ValueError
    except ValueError:
        print('Please use a positive integer for both inputs.')
        return False

    if total_conversion > total_clicks:
        print("Total Conversion can't be higher than Total Clicks. Please use different inputs.")
        return False
    else:
        print('Conversion Rate (CR) is {}%'.format(round(total_conversion / total_clicks * 100, 1)))

    return True


def CPA(cost_of_conversion: float, n_conversions: int):
    '''
    Cost-per-Acquisition method measures the amount of cost for a conversion from your ad.

    :param cost_of_conversion: float, total cost of conversions for some period of time
    :param n_conversions: int, total number of conversions for some period of time
    :return: bool, did the method work successfully or not
    '''
    try:
        cost_of_conversion = float(cost_of_conversion)
        if cost_of_conversion < 0:
            raise ValueError
    except ValueError:
        print('Please use a positive real number for the Total Cost of Conversion input.')
        return False
    try:
        n_conversions = int(n_conversions)
        if n_conversions < 0:
            raise ValueError
    except ValueError:
        print('Please use a positive integer for the Total Number of Conversions input.')
        return False

    print('Average Cost-per-Acquisition is {}$.'.format(round(cost_of_conversion / n_conversions, 1)))

    return True


def BR(n_single_page: int, n_all_sessions: int):
    '''
    Bounce Rate (BR) method measures the percentage of all sessions on your website
     in which users viewed only a single page and triggered only a single request.

    :param n_single_page: int, the number of single-page sessions that have a session duration of 0 seconds
    :param n_all_sessions: int, the number of all sessions on your website
    :return: bool, did the method work successfully or not
    '''
    try:
        n_single_page = int(n_single_page)
        if n_single_page < 0:
            raise ValueError
        n_all_sessions = int(n_all_sessions)
        if n_all_sessions < 0:
            raise ValueError
    except ValueError:
        print('Please use a positive integer for both inputs.')
        return False

    if n_single_page > n_all_sessions:
        print("Number of Single Page Sessions can't be higher than the Number of All Sessions. "
              "Please use different inputs.")
        return False
    else:
        print('Bounce Rate (BR) is {}%'.format(round(n_single_page / n_all_sessions * 100, 1)))

    return True


def ROAS(conversion_value: float, cost_of_conversion: float):
    '''
    Return on Ad Spend (ROAS) method measures the amount of revenue your business earns
     for each dollar it spends on advertising.

    :param conversion_value: float, the amount of revenue your business earns from a given conversion
    :param cost_of_conversion: float, total cost of conversions for some period of time
    :return: bool, did the method work successfully or not
    '''
    try:
        conversion_value = float(conversion_value)
        cost_of_conversion = float(cost_of_conversion)
        if cost_of_conversion or conversion_value < 0:
            raise ValueError
    except ValueError:
        print('Please use a positive real number for both inputs.')
        return False

    print('Return on Ad Spend is {}$.'.format(round(conversion_value / cost_of_conversion, 1)))

    return True


if __name__ == '__main__':
    # params = (input('Total Clicks: '), input('Total Ad Impressions: '))
    # CTR(*params)
    # params = (input('Amount gained: '), input('Amount spent: '))
    # ROI(*params)
    # params = (input('Number of users: '))
    # APT(input('Number of users: '))
    params = (input('Average Purchase Value (in $): '), input('Average Purchase Frequency: '),
              input('Average Customer Lifespan (in years): '))
    CLV(*params)
    # params = (input('Total Conversion: '), input('Total Clicks: '))
    # CR(*params)
